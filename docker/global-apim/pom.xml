<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>io.cellery.distribution</groupId>
        <artifactId>io.cellery.distribution.docker</artifactId>
        <version>0.1.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>io.cellery.distribution.docker.global-apim</artifactId>
    <version>0.1.1-SNAPSHOT</version>
    <name>Cellery Distribution - Dockerfiles - API Manager</name>
    <description>Docker files for Cellery Control Plane API Manager</description>
    <packaging>pom</packaging>

    <dependencies>
        <dependency>
            <groupId>io.cellery.security</groupId>
            <artifactId>io.cellery.security.extensions</artifactId>
        </dependency>
        <dependency>
            <groupId>io.cellery.security</groupId>
            <artifactId>io.cellery.security.sts.endpoint.core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.cellery.security</groupId>
            <artifactId>io.cellery.security.token.endpoint</artifactId>
            <type>war</type>
        </dependency>

        <!-- Tracing Dependencies starts here -->
        <dependency>
            <groupId>io.cellery.observability</groupId>
            <artifactId>io.cellery.observability.tracing.synapse.handler</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentracing</groupId>
            <artifactId>opentracing-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentracing</groupId>
            <artifactId>opentracing-util</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.brave</groupId>
            <artifactId>brave</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentracing.brave</groupId>
            <artifactId>brave-opentracing</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.zipkin2</groupId>
            <artifactId>zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.reporter2</groupId>
            <artifactId>zipkin-reporter</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.reporter2</groupId>
            <artifactId>zipkin-sender-urlconnection</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.reporter2</groupId>
            <artifactId>zipkin-sender-okhttp3</artifactId>
        </dependency>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
        </dependency>
        <dependency>
            <groupId>com.squareup.okio</groupId>
            <artifactId>okio</artifactId>
        </dependency>
        <!-- Tracing Dependencies ends here -->
    </dependencies>

    <build>
        <plugins>
            <!-- Copy Maven dependencies into target/files/lib -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-osgi-libs</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <overWriteReleases>false</overWriteReleases>
                            <includeScope>runtime</includeScope>
                            <outputDirectory>${project.build.directory}/files/dropins</outputDirectory>
                            <excludeArtifactIds>
                                io.cellery.security.sts.endpoint.core, io.cellery.security.token.endpoint,
                                io.cellery.security.extensions, opentracing-api,
                                opentracing-util, zipkin, brave, brave-opentracing, zipkin-reporter,
                                zipkin-sender-urlconnection, zipkin-sender-okhttp3, okhttp, okio
                            </excludeArtifactIds>
                            <excludeTransitive>true</excludeTransitive>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-non-osgi-libs</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <overWriteReleases>false</overWriteReleases>
                            <includeScope>runtime</includeScope>
                            <outputDirectory>${project.build.directory}/files/lib/</outputDirectory>
                            <excludeArtifactIds>
                                io.cellery.security.token.endpoint, io.cellery.observability.tracing.synapse.handler
                            </excludeArtifactIds>
                            <excludeTransitive>true</excludeTransitive>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-sts-web-app</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>io.cellery.security</groupId>
                                    <artifactId>io.cellery.security.token.endpoint</artifactId>
                                    <version>${cellery.mesh.security.version}</version>
                                    <type>war</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}/files/webapps/</outputDirectory>
                                    <destFileName>api#identity#cellery-auth#v1.0.war</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-dcr-web-app</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.wso2.carbon.identity.inbound.auth.oauth2</groupId>
                                    <artifactId>org.wso2.carbon.identity.oauth2.dcr.endpoint</artifactId>
                                    <version>${carbon.identity.oauth2.version}</version>
                                    <type>war</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}/files/webapps/</outputDirectory>
                                    <destFileName>api#identity#oauth2#dcr#v1.1.war</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-authenticationendpoint</id>
                        <!-- here the phase you need -->
                        <phase>initialize</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/files/authenticationendpoint</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>
                                        ${project.basedir}/../lightweight-idp/resources/identity/authenticationendpoint
                                    </directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--Build Docker image-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <repository>${docker.repo.name}/wso2am</repository>
                            <tag>${docker.image.tag}</tag>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
